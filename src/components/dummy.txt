import React, { useState } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

const LoginModal = ({ show, onClose }) => {
  const [isLogin, setIsLogin] = useState(true); // true for Login, false for Signup

  const toggleForm = () => {
    setIsLogin(!isLogin);
  };

  if (!show) {
    return null;
  }

  const loginValidationSchema = Yup.object({
    email: Yup.string().email('Invalid email address').required('Required'),
    password: Yup.string().required('Required'),
  });

  const signupValidationSchema = Yup.object({
    name: Yup.string().required('Required'),
    email: Yup.string().email('Invalid email address').required('Required'),
    password: Yup.string().required('Required'),
    confirmPassword: Yup.string()
      .oneOf([Yup.ref('password'), null], 'Passwords must match')
      .required('Required'),
  });

  return (
    <div className="modal fade show d-block" tabIndex="-1" role="dialog" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>
      <div className="modal-dialog modal-dialog-centered" role="document">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">{isLogin ? 'Welcome back, please login' : 'Hello there, please signup'}</h5>
            <button type="button" className="btn-close" aria-label="Close" onClick={onClose}></button>
          </div>
          <div className="modal-body">
            <Formik
              initialValues={isLogin ? { email: '', password: '' } : { name: '', email: '', password: '', confirmPassword: '' }}
              validationSchema={isLogin ? loginValidationSchema : signupValidationSchema}
              onSubmit={(values) => {
                console.log(values);
                onClose(); // Close modal after submission
              }}
            >
              {() => (
                <Form>
                  {!isLogin && (
                    <div className="mb-3">
                      <label htmlFor="name" className="form-label">Name</label>
                      <Field type="text" className="form-control" id="name" placeholder="Enter your name" />
                      <ErrorMessage name="name" component="div" className="text-danger" />
                    </div>
                  )}
                  <div className="mb-3">
                    <label htmlFor="email" className="form-label">Email</label>
                    <Field type="email" className="form-control" id="email" placeholder="Enter your email" />
                    <ErrorMessage name="email" component="div" className="text-danger" />
                  </div>
                  <div className="mb-3">
                    <label htmlFor="password" className="form-label">Password</label>
                    <Field type="password" className="form-control" id="password" placeholder="Enter your password" />
                    <ErrorMessage name="password" component="div" className="text-danger" />
                  </div>
                  {!isLogin && (
                    <div className="mb-3">
                      <label htmlFor="confirmPassword" className="form-label">Confirm Password</label>
                      <Field type="password" className="form-control" id="confirmPassword" placeholder="Confirm your password"/>
                      <ErrorMessage name="confirmPassword" component="div" className="text-danger"/>
                    </div>
                  )}
                  <button type="submit" className="btn btn-primary w-100">{isLogin ? 'Login' : 'Signup'}</button>
                </Form>
              )}
            </Formik>
          </div>
          <div className='modal-footer'>
            <button type='button' className='btn btn-secondary' onClick={toggleForm}>
              {isLogin ? "Don't have an account? Signup!" : 'Already have an account? Login!'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginModal;